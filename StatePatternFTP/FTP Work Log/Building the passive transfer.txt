Build logic to verify if a command has the correct number of arguements
	501 Syntax error in parameters or arguments.
Refactor the creation of FTP Commands so that it uses an interface to validate each command.
	
	
Implement LIST command
	Sends a list from the server to the passive DTP (Data Transfer Process)
	
	
	
	
Passive - Server listens on IP and port specified by PORT (or the default IP and port)
	Server opens a port (N > 1023)
Active - Client listens on IP and port specified by PORT (or the default IP and port)

Command
	PASV - Server opens up on a data port. Response is the data port (format?).
Passive steps
	Client contacts server (on server's port 21).	(Done)
	Client issues PASV command.					(In Progress)
		Server picks a port (50,000 <= P <= 65,535)			
	Server responds to PASV command with P which it begins listneing to for the data connection.	(Not done)
	Client connects to the servers data port.											(Not done)
	The server detects the connection and responds by sending the requested data down it.	(Not done)
	
Server process port (aka L) = 21
Passive server data port P > 1023
Passive client ports. Cmd is N > 1023, Data is N+1
Unprivileged port range is 1024 - 65,535
Full port range 1 to 65,535
FileZilla recommends P >= 50,000
p1 = (P - p2)/256

PASV response codes
	227 Entering Passive Mode (h1,h2,h3,h4,p1,p2).
	501 Syntax error in parameters or arguments.

p1 = (P - p2)/256

256p1 = P - p2

p2 + 256p1 = P

-- Notes in maintaining the Data connection --

Excerpt from "3.2.  ESTABLISHING DATA CONNECTIONS"

      In general, it is the server's responsibility to maintain the data
      connection--to initiate it and to close it.  The exception to this
      is when the user-DTP is sending the data in a transfer mode that
      requires the connection to be closed to indicate EOF.  The server
      MUST close the data connection under the following conditions:

         1. The server has completed sending data in a transfer mode
            that requires a close to indicate EOF.

         2. The server receives an ABORT command from the user.

         3. The port specification is changed by a command from the
            user.

         4. The control connection is closed legally or otherwise.

         5. An irrecoverable error condition occurs.

      Otherwise the close is a server option, the exercise of which the
      server must indicate to the user-process by either a 250 or 226
      reply only.


Excerpt from "3.3.  DATA CONNECTION MANAGEMENT"

      Reuse of the Data Connection:  When using the stream mode of data
      transfer the end of the file must be indicated by closing the
      connection.  This causes a problem if multiple files are to be
      transfered in the session, due to need for TCP to hold the
      connection record for a time out period to guarantee the reliable
      communication.  Thus the connection can not be reopened at once.

      There are two solutions to this problem.  The first is to
      negotiate a non-default port.  The second is to use another
      transfer mode.

      A comment on transfer modes.  The stream transfer mode is
      inherently unreliable, since one can not determine if the
      connection closed prematurely or not.  The other transfer modes
      (Block, Compressed) do not close the connection to indicate the
      end of file.  They have enough FTP encoding that the data
      connection can be parsed to determine the end of the file.
      Thus using these modes one can leave the data connection open
      for multiple file transfers.
	

-- Multithreading approach --
A class will encapsulate the logic of the data connection and transfer itself. It will listen for the incoming connection, once established it will then send the requested data to the client. Each data connection appears to be responsible for one request, so one can assume that we can throw them away after each connection. However this will change in the future and the connection will have to remain established in order to serve subsequent requests from the client. We must be able to communicate with an instance during all stages of its lifecycle (Whilst blocked awaiting a connection, performing a transfer, etc).

Connection lifecycle. Created, Listening (Blocked), Connected, Transferring, Disconnected, Deleted.

A subsequent PASV call will instantaneously terminate the existing data connection.